

[logging]
level = "INFO"


[worker]
#
# Name of the worker instance
name = "default"
#
# Description
#
# Description for administrative purpose
description = ""
#
# Max number of projects in cache
#
# The maximum number of projects allowed in cache.
# The default value is set to 50 projects. 
max_projects = 50
#
# Load project in cache when requested
#
# Load project in cache at request.
# If set to 'false', project not loaded in cache will
# return a 403 HTTP code when requested.
# Thus, adding project's to cache will require a specific
# action from another service or admininstrative
# management tools.
load_project_on_request = true
#
# Reload outdated project when requested
#
# Reload outdated project at request.
# If set to 'false', outdated project in cache will
# not be refreshed when requested.
# Thus, refreshing project's to cache will require a specific
# action from another service or admininstrative
# management tools.
reload_outdated_project_on_request = false
#
# Maximum chunk size
#
# Set the maximum chunk size for streamed responses.
max_chunk_size = 1048576
#
# Max number of concurrent requests
#
# The maximum number of requests that can be
# queued for this worker task. If the number of
# waiting requests reach the limit, the subsequent
# requests will be returned with a `service unavailable`
# error
max_waiting_requests = 20
#
# Stalled process timeout
#
# Set the amount of time in seconds before considering
# considering that a process is stalled.
# A stalled process will be terminated and the server will
# exit with an error code
process_timeout = 20
#
# Process grace period
#
# The grace period to apply on worker timeout
# when attempting to cancel the actual request
process_grace_period = 3
#
# Shutdown grace period
#
# The maximum amount of time to wait before
# closing connections. During this period,
# no new connections are allowed.
shutdown_grace_period = 20
#
# Max allowed processes failure ratio
#
# The maximum ratio of terminated/initial processes
# allowed. If this limit is reached,  the server will
# issue a critical failure before exiting.
max_processes_failure_pressure = 0.0
#
# Number of Qgis processes
#
# Set the number of Qgis processes per worker.
# If a processes crash, the worker is in a degraded
# state. When the last process exit the worker will
# stop with an error code.
# 
# In order not to let the worker degrade itself slowly
# the number of worker should be kept low (from 1 to 3)
# or keep a relatively low 'max_processes_failure_pressure'.
# Note: server must be restarted if this option is modified.
num_processes = 1
#
# Rescale period
#
# Set the interval in seconds between rescaling of the number of
# live processes.
# Scaling will adjust the number of processes according 
# to the configuration and dead processes will be replaced
# with new processes.
rescale_period = 5
#
# Qgis settings
#
# Qgis settings override.
# Use the syntax '<section>/<path>' for keys.
# Not that values defined here will override those
# from QGIS3.ini file.
qgis_settings = {}

#
# Projects configuration
#
# Projects and cache configuration
#
[worker.projects]
#
# Trust layer metadata
#
# Trust layer metadata.
# Improves layer load time by skipping expensive checks
# like primary key unicity, geometry type and
# srid and by using estimated metadata on layer load.
# Since QGIS 3.16
trust_layer_metadata = false
#
# Disable GetPrint requests
#
# Don't load print layouts.
# Improves project read time if layouts are not required,
# and allows projects to be safely read in background threads
# (since print layouts are not thread safe).
disable_getprint = false
#
# Force read only mode
#
# Force layers to open in read only mode
force_readonly_layers = true
#
# Ignore bad layers
#
# Allow projects to be loaded with event if it contains
# layers that cannot be loaded
# Note that the 'dont_resolve_layers flag' trigger automatically
# this option.
ignore_bad_layers = false
#
# Disable OWS advertised urls
#
# Disable ows urls defined in projects.
# This may be necessary because Qgis projects
# urls override proxy urls.
disable_advertised_urls = false
#
# Scheme mapping definitions
#
# Defines mapping betweeen location base path and storage handler root url.
# Resource path relative to location will be joined the the root url path.
# In the case of Qgis storage, the handler is responsible for transforming
# the result url into a comprehensive format for the corresponding
# QgsProjectStorage implementation.
# This is handled by the default storage implementation for Qgis native
# project storage. In case of custom QgsProjectStorage, if the scheme does not allow passing
# project as path component, it is possible to specify a custom resolver function.
search_paths = {}
#
# Allow direct path resolution
#
# Allow direct path resolution if there is
# no matching from the search paths.
# Uri are directly interpreted as valid Qgis project's path.
# WARNING: allowing this may be a security vulnerabilty.
allow_direct_path_resolution = true
#
# Project storage Handler configurations
#
# Configure storage handlers.
# The name will be used as scheme for project's search path
# configuration.
handlers = {}

#
# Plugins configuration
#
[worker.plugins]
#
# Plugin paths
#
# The list of search paths for plugins.
# Qgis plugins found will be loaded according to
# the 'install' list.
# If the list is empty, the 'QGIS_PLUGINPATH'
# variable will be checked.
paths = []
#
# Installable plugins
#
# The list of installable plugins.
# Note: if the plugin directory contains other plugins
# plugins not in the list will NOT be loaded !
# The Plugins will be installed at startup
# if the 'install_mode' is set to 'auto'.
# Note that an empty list means what it is:
# i.e, *no* installed plugins.
#install =   	# Optional
#
# Plugin installation mode
#
# If set to 'auto', plugins installation
# will be checked at startup. Otherwise,
# Installation will be done from already available
# plugins.
install_mode = "external"
#
# Enable processing scripts
#
# Enable publication of processing scripts
enable_scripts = true
#
# Extra builtins providers
#
# Load extra builtin processing providers
# such as 'grass' and 'otb'.
extra_builtin_providers = []
#
# Path to plugin manager executable
#
# The absolute path to the qgis-plugin_manager executable
# that will be used for installing plugin in automatic mode.
plugin_manager = "/usr/local/bin/qgis-plugin-manager"

#
# Interfaces to listen to
#
[[worker.interfaces]]
#
# TCP:PORT interface or unix socket
listen = ["[::]",23456]
use_ssl = false
ssl = "cafile=None certfile=None keyfile=None"


# Bootstrap configuration from remote location.
# The configuration is fetched from the remote url
# at startup and override all local settings.
[worker_config_url]
#
# External configuration Url
#
# Url to external configuration.
# The server will issue a GET method against this url at startup.
# The method should returns a valid configuration fragment.
#url =   	# Optional

#
[worker_config_url.ssl]
#
# CA file
#cafile =   	# Optional
#
# SSL/TLS  key
#
# Path to the SSL key file
#certfile =   	# Optional
#
# SSL/TLS Certificat
#
# Path to the SSL certificat file
#keyfile =   	# Optional


# Bootstrap configuration from remote location.
# The configuration is fetched from the remote url
# at startup and override all local settings.
[restore_cache]
#
# External configuration Url
#
# Url to external configuration.
# The server will issue a GET method against this url at startup.
# The method should returns a valid configuration fragment.
#url =   	# Optional

#
[restore_cache.ssl]
#
# CA file
#cafile =   	# Optional
#
# SSL/TLS  key
#
# Path to the SSL key file
#certfile =   	# Optional
#
# SSL/TLS Certificat
#
# Path to the SSL certificat file
#keyfile =   	# Optional

