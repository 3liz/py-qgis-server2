# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import api_pb2 as api__pb2


class QgisWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/api.QgisWorker/Ping',
                request_serializer=api__pb2.PingRequest.SerializeToString,
                response_deserializer=api__pb2.PingReply.FromString,
                )
        self.ExecuteOwsRequest = channel.unary_stream(
                '/api.QgisWorker/ExecuteOwsRequest',
                request_serializer=api__pb2.OwsRequest.SerializeToString,
                response_deserializer=api__pb2.ResponseChunk.FromString,
                )
        self.ExecuteRequest = channel.unary_stream(
                '/api.QgisWorker/ExecuteRequest',
                request_serializer=api__pb2.GenericRequest.SerializeToString,
                response_deserializer=api__pb2.ResponseChunk.FromString,
                )
        self.CheckoutProject = channel.unary_stream(
                '/api.QgisWorker/CheckoutProject',
                request_serializer=api__pb2.CheckoutRequest.SerializeToString,
                response_deserializer=api__pb2.CacheInfo.FromString,
                )
        self.DropProject = channel.unary_stream(
                '/api.QgisWorker/DropProject',
                request_serializer=api__pb2.DropRequest.SerializeToString,
                response_deserializer=api__pb2.CacheInfo.FromString,
                )
        self.ClearCache = channel.unary_unary(
                '/api.QgisWorker/ClearCache',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                )
        self.ListCache = channel.unary_stream(
                '/api.QgisWorker/ListCache',
                request_serializer=api__pb2.ListRequest.SerializeToString,
                response_deserializer=api__pb2.CacheInfo.FromString,
                )
        self.ListPlugins = channel.unary_stream(
                '/api.QgisWorker/ListPlugins',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.PluginInfo.FromString,
                )
        self.SetConfig = channel.unary_unary(
                '/api.QgisWorker/SetConfig',
                request_serializer=api__pb2.JsonConfig.SerializeToString,
                response_deserializer=api__pb2.Empty.FromString,
                )
        self.GetConfig = channel.unary_unary(
                '/api.QgisWorker/GetConfig',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.JsonConfig.FromString,
                )
        self.GetProjectInfo = channel.unary_stream(
                '/api.QgisWorker/GetProjectInfo',
                request_serializer=api__pb2.ProjectRequest.SerializeToString,
                response_deserializer=api__pb2.ProjectInfo.FromString,
                )
        self.Catalog = channel.unary_stream(
                '/api.QgisWorker/Catalog',
                request_serializer=api__pb2.CatalogRequest.SerializeToString,
                response_deserializer=api__pb2.CatalogItem.FromString,
                )
        self.GetEnv = channel.unary_unary(
                '/api.QgisWorker/GetEnv',
                request_serializer=api__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.JsonConfig.FromString,
                )


class QgisWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteOwsRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckoutProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPlugins(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProjectInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Catalog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QgisWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=api__pb2.PingRequest.FromString,
                    response_serializer=api__pb2.PingReply.SerializeToString,
            ),
            'ExecuteOwsRequest': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteOwsRequest,
                    request_deserializer=api__pb2.OwsRequest.FromString,
                    response_serializer=api__pb2.ResponseChunk.SerializeToString,
            ),
            'ExecuteRequest': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteRequest,
                    request_deserializer=api__pb2.GenericRequest.FromString,
                    response_serializer=api__pb2.ResponseChunk.SerializeToString,
            ),
            'CheckoutProject': grpc.unary_stream_rpc_method_handler(
                    servicer.CheckoutProject,
                    request_deserializer=api__pb2.CheckoutRequest.FromString,
                    response_serializer=api__pb2.CacheInfo.SerializeToString,
            ),
            'DropProject': grpc.unary_stream_rpc_method_handler(
                    servicer.DropProject,
                    request_deserializer=api__pb2.DropRequest.FromString,
                    response_serializer=api__pb2.CacheInfo.SerializeToString,
            ),
            'ClearCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCache,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'ListCache': grpc.unary_stream_rpc_method_handler(
                    servicer.ListCache,
                    request_deserializer=api__pb2.ListRequest.FromString,
                    response_serializer=api__pb2.CacheInfo.SerializeToString,
            ),
            'ListPlugins': grpc.unary_stream_rpc_method_handler(
                    servicer.ListPlugins,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.PluginInfo.SerializeToString,
            ),
            'SetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfig,
                    request_deserializer=api__pb2.JsonConfig.FromString,
                    response_serializer=api__pb2.Empty.SerializeToString,
            ),
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.JsonConfig.SerializeToString,
            ),
            'GetProjectInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.GetProjectInfo,
                    request_deserializer=api__pb2.ProjectRequest.FromString,
                    response_serializer=api__pb2.ProjectInfo.SerializeToString,
            ),
            'Catalog': grpc.unary_stream_rpc_method_handler(
                    servicer.Catalog,
                    request_deserializer=api__pb2.CatalogRequest.FromString,
                    response_serializer=api__pb2.CatalogItem.SerializeToString,
            ),
            'GetEnv': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnv,
                    request_deserializer=api__pb2.Empty.FromString,
                    response_serializer=api__pb2.JsonConfig.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.QgisWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QgisWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.QgisWorker/Ping',
            api__pb2.PingRequest.SerializeToString,
            api__pb2.PingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteOwsRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.QgisWorker/ExecuteOwsRequest',
            api__pb2.OwsRequest.SerializeToString,
            api__pb2.ResponseChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.QgisWorker/ExecuteRequest',
            api__pb2.GenericRequest.SerializeToString,
            api__pb2.ResponseChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckoutProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.QgisWorker/CheckoutProject',
            api__pb2.CheckoutRequest.SerializeToString,
            api__pb2.CacheInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.QgisWorker/DropProject',
            api__pb2.DropRequest.SerializeToString,
            api__pb2.CacheInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.QgisWorker/ClearCache',
            api__pb2.Empty.SerializeToString,
            api__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.QgisWorker/ListCache',
            api__pb2.ListRequest.SerializeToString,
            api__pb2.CacheInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPlugins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.QgisWorker/ListPlugins',
            api__pb2.Empty.SerializeToString,
            api__pb2.PluginInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.QgisWorker/SetConfig',
            api__pb2.JsonConfig.SerializeToString,
            api__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.QgisWorker/GetConfig',
            api__pb2.Empty.SerializeToString,
            api__pb2.JsonConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProjectInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.QgisWorker/GetProjectInfo',
            api__pb2.ProjectRequest.SerializeToString,
            api__pb2.ProjectInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Catalog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.QgisWorker/Catalog',
            api__pb2.CatalogRequest.SerializeToString,
            api__pb2.CatalogItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEnv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.QgisWorker/GetEnv',
            api__pb2.Empty.SerializeToString,
            api__pb2.JsonConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
