
[logging]
level = "INFO"

[processing]
#
# Projects configuration
#
# Projects and cache configuration
#projects = strict_check=True trust_layer_metadata=False disable_getprint=False force_readonly_layers=False disable_advertised_urls=False search_paths={} allow_direct_path_resolution=True
#
# Plugin configuration
#plugins = paths=[] install=None install_mode='external' enable_scripts=True extra_builtin_providers=set() plugin_manager=PosixPath('/usr/local/bin/qgis-plugin_manager')
#
# Working directory
#
# Parent working directory where processes are executed.
# Each processes will create a working directory for storing
# result files and logs.
# The default value is set to the current directory.
workdir = /home/david/qgis/python_modules/py-qgis-processes/doc
#
# Internal qgis providers exposed
#
# List of exposed QGIS processing internal providers.
# NOTE: It is not recommended exposing all providers like
# `qgis` or `native`, instead provide your own wrapping
# algorithm, script or model.
exposed_providers = ['script', 'model']
#
# Default vector file extension
#
# Define the default vector file extensions for vector destination
# parameters. If not specified, then the QGIS default value is used.
default_vector_file_ext = "fgb"
#
# Default vector file extension
#
# Define the default raster file extensions for raster destination
# parameters. If not specified, then the QGIS default value is used.
#default_raster_file_ext =   	# Optional
#
# Force ellipsoid imposed by the source project
#
# Force the ellipsoid from the src project into the destination project.
# This only apply if the src project has a valid CRS.
adjust_ellipsoid = false
#
# Set default CRS
#
# Set the CRS to use when no source map is specified.
# For more details on supported formats see the GDAL method
# 'GdalSpatialReference::SetFromUserInput()'
default_crs = "urn:ogc:def:crs:OGC:1.3:CRS84"
#
# Advertised services urls
#
# Url template used for  OGC services references.
advertised_services_url = "ows:$jobId/$name"
#
# Storage url
#
# Url template for downloading resources
store_url = "store:$jobId/$resource"
#
# Use destination input as sink
#
# Allow input value as sink for destination layers.
# This allow value passed as input value to be interpreted as
# path or uri sink definition. This enable passing any string
# that QGIS may use a input source but without open options except for the
# 'layername=<name>' option.
# NOTE: Running concurrent jobs with this option may result in unpredictable
# behavior.For that reason it is considered as an UNSAFE OPTION and you should never enable
# this option if you are exposing the service publicly.
# 
# File path inputs prefixed with '/' will correspond to path located in the root
# directory specified by the `raw_destination_root_path` option.
# Otherwise, they will be stored in the job folder.
# 
raw_destination_input_sink = false
#
# Raw destination root path
#
# Specify the root directory for storing destination layers files when
# the `raw_destination_input_sink` option is enabled.
# If not specified, files will be stored in the job folder.
# 
#raw_destination_root_path =   	# Optional
#
# SSL Certificates
#
# SSL credentials to use for references inputs
#certificats = cafile=None certfile=None keyfile=None

#
# Projects configuration
#
# Projects and cache configuration
#
#[processing.projects]
#
# Enable strict checking
#
# Activate strict checking of project layers.
# When enabled, Qgis projects with invalid layers will be dismissed.
# Trying to access such a project will lead to a 'unprocessable Entity'
# (422) HTTP error
#strict_check = true
#
# Trust layer metadata
#
# Trust layer metadata.
# Improves layer load time by skipping expensive checks
# like primary key unicity, geometry type and
# srid and by using estimated metadata on layer load.
# Since QGIS 3.16
#trust_layer_metadata = false
#
# Disable GetPrint requests
#
# Don't load print layouts.
# Improves project read time if layouts are not required,
# and allows projects to be safely read in background threads
# (since print layouts are not thread safe).
#disable_getprint = false
#
# Force read only mode
#
# Force layers to open in read only mode
#force_readonly_layers = false
#
# Disable OWS advertised urls
#
# Disable ows urls defined in projects.
# This may be necessary because Qgis projects
# urls override proxy urls.
#disable_advertised_urls = false
#
# Scheme mapping definitions
#
# Defines mapping betweeen location base path and storage handler root url.
# Resource path relative to location will be joined the the root url path.
# In the case of Qgis storage, the handler is responsible for transforming
# the result url into a comprehensive format for the corresponding
# QgsProjectStorage implementation.
# This is handled by the default storage implementation for Qgis native
# project storage. In case of custom QgsProjectStorage, if the scheme does not allow passing
# project as path component, it is possible to specify a custom resolver function.
#search_paths = {}
#
# Allow direct path resolution
#
# Allow direct path resolution if there is
# no matching from the search paths.
# Uri are directly interpreted as valid Qgis project's path.
# WARNING: allowing this may be a security vulnerabilty.
#allow_direct_path_resolution = true

#
# Plugin configuration
#
#[processing.plugins]
#
# Plugin paths
#
# The list of search paths for plugins.
# Qgis plugins found will be loaded according to
# the 'install' list.
# If the list is empty, the 'QGIS_PLUGINPATH'
# variable will be checked.
#paths = []
#
# Installable plugins
#
# The list of installable plugins.
# Note: if the plugin directory contains other plugins
# plugins not in the list will NOT be loaded !
# The Plugins will be installed at startup
# if the 'install_mode' is set to 'auto'.
# Note that an empty list means what it is:
# i.e, *no* installed plugins.
#install =   	# Optional
#
# Plugin installation mode
#
# If set to 'auto', plugins installation
# will be checked at startup. Otherwise,
# Installation will be done from already available
# plugins.
#install_mode = "external"
#
# Enable processing scripts
#
# Enable publication of processing scripts
#enable_scripts = true
#
# Extra builtins providers
#
# Load extra builtin processing providers
# such as 'grass' and 'otb'.
#extra_builtin_providers = set()
#
# Path to plugin manager executable
#
# The absolute path to the qgis-plugin_manager executable
# that will be used for installing plugin in automatic mode.
#plugin_manager = /usr/local/bin/qgis-plugin_manager

#
# SSL Certificates
#
# SSL credentials to use for references inputs
#
#[processing.certificats]
#
# CA file
#cafile =   	# Optional
#
# SSL/TLS  key
#
# Path to the SSL key file
#certfile =   	# Optional
#
# SSL/TLS Certificat
#
# Path to the SSL certificat file
#keyfile =   	# Optional

#  OAPI configuration
#     
[oapi]
title = "Py-Qgis-Processes"
description = "Publish Qgis processing algorithms as OGC api processes"

# Configure access policy
[access_policy]
#
# Access policy module
#
# The module implementing the access policy for
# processes execution.
policy_class = "py_qgis_processes.server.policies.DefaultAccessPolicy"
config = {}

# Defining job realm allow filtering job's requests by a token that is
# set by the client when requesting task execution (see description below).
[job_realm]
#
# Enable job realm header
#
# When enabled, use the 'X-Py-Qgis-Job-Realm' http header
# as a client identification token for retrieving jobs status and results.
enabled = false
#
# Admininistrator realm jobs token
#
# A catch all token for listing and retrieve status and results
# for all jobs.
#admin =   	# Optional

[server]
#
# Interfaces to listen to
listen = ["127.0.0.1",8340]
#
# Use ssl
use_ssl = false
#
# SSL configuration
#ssl = cafile=None certfile=None keyfile=None
#
# CORS origin
#
# Allows to specify origin for CORS. If set 'all' will set
# Access-Control-Allow-Origin to '*'; 'same-origin' return
# the same value as the 'Origin' request header.
# A url may may be specified, restricting allowed origin to
# this url.
cross_origin = "all"
#proxy = resolve_proxy_headers=False x_headers=False prefix_path=''
#
# Backend request timeout
timeout = 5

#
# SSL configuration
#
#[server.ssl]
#
# CA file
#cafile =   	# Optional
#
# SSL/TLS  key
#
# Path to the SSL key file
#certfile =   	# Optional
#
# SSL/TLS Certificat
#
# Path to the SSL certificat file
#keyfile =   	# Optional

#
# Proxy Configuration
#[server.proxy]
#
# Proxy headers
#
# Enable proxy headers resolution.
# Include support for 'Forwarded' headers
# and 'X-Forwarded' hedaers if x_headers is 
# enabled.
#resolve_proxy_headers = false
#
# Support for 'X-Forwarded' headers
#x_headers = false
#
# Prefix path
#prefix_path = ""

[executor]
#celery = broker_host='' broker_use_ssl=False broker_ssl=None backend_host='localhost:6379/0' backend_use_ssl=False backend_ssl=None security=None task_time_limit=3600 task_time_grace_period=300 result_expires=86400 concurrency=None max_tasks_per_child=None max_memory_per_child=None
#
# Message expiration timeout
#
# The amount of time an execution messagecan wait on queue before beeing processed.
message_expiration_timeout = 600

#
#[executor.celery]
#
# Celery amqp broker host
#broker_host = ""
#broker_use_ssl = false
#broker_ssl =   	# Optional
#
# Celery redis backend host
#backend_host = "localhost:6379/0"
#backend_use_ssl = false
#backend_ssl =   	# Optional
#security =   	# Optional
#
# Task hard time limit in seconds.
# The worker processing the task will be killed
# and replaced with a new one when this is exceeded.
#task_time_limit = 3600
#
# Grace period to add to the 'task_time_limit'
# value.
# The SoftTimeLimitExceeded exception will be raised
# when the 'task_time_limit+task_time_grace_period' is exceeded.
#task_time_grace_period = 300
#
# Time (in seconds), for when after stored task tombstones will
# be deleted
#result_expires = 86400
#
# Concurrency
#
# The number of concurrent worker processes executing tasks.
#concurrency =   	# Optional
#
# Processes life cycle
#
# Maximum number of tasks a pool worker process can execute
# before it's replaced with a new one. Default is no limit.
#max_tasks_per_child =   	# Optional
#
# Maximum consumed memory
#
# Maximum amount of resident memory, in kilobytes,
# that may be consumed by a worker before it will
# be replaced by a new worker.
#max_memory_per_child =   	# Optional

